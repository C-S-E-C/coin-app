name: Tauri Bot

on:
  issue_comment:
    types: [created, edited]
  issues:
    types: [opened, edited]

permissions:
  issues: write
  contents: write
  pull-requests: write

env:
  TARGET_USER: 'ianchzhu'
  TAURI_APP_NAME: 'csec-coin-app'

jobs:
  process-commands:
    # Only run if the comment/issue is from the target user
    if: |
      (github.event.comment && github.event.comment.user.login == 'ianchzhu') ||
      (github.event.issue.user.login == 'ianchzhu')
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Check for commands
        id: check-commands
        run: |
          COMMENT_BODY=""
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
          else
            COMMENT_BODY="${{ github.event.issue.body }}"
          fi
          
          echo "Comment body: $COMMENT_BODY"
          
          if echo "$COMMENT_BODY" | grep -q "/init"; then
            echo "init_command=true" >> $GITHUB_OUTPUT
            echo "Found /init command"
          elif echo "$COMMENT_BODY" | grep -q "/build"; then
            echo "build_command=true" >> $GITHUB_OUTPUT
            echo "Found /build command"
          else
            echo "No valid command found"
          fi

      - name: Checkout code
        if: steps.check-commands.outputs.init_command == 'true' || steps.check-commands.outputs.build_command == 'true'
        uses: actions/checkout@v4

      - name: Setup pnpm
        if: steps.check-commands.outputs.init_command == 'true' || steps.check-commands.outputs.build_command == 'true'
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        if: steps.check-commands.outputs.init_command == 'true' || steps.check-commands.outputs.build_command == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create basic package structure for init
        if: steps.check-commands.outputs.init_command == 'true'
        run: |
          if [ ! -f "pnpm-lock.yaml" ]; then
            echo "Creating initial pnpm-lock.yaml..."
            pnpm install --lockfile-only
          fi

      - name: Initialize Tauri (for /init command)
        if: steps.check-commands.outputs.init_command == 'true'
        run: |
          pnpm add -g @tauri-apps/cli
          
          if [ -d "src-tauri" ]; then
            echo "Tauri is already initialized"
            echo "::warning::Tauri is already initialized in this repository"
            exit 0
          fi
          
          echo "Initializing Tauri..."
          pnpm tauri init \
            --app-name "${{ env.TAURI_APP_NAME }}" \
            --window-title "${{ env.TAURI_APP_NAME }}"
          
          pnpm add -D @tauri-apps/cli@latest @tauri-apps/api@latest
          pnpm add tauri-plugin-log@latest
          pnpm install
          
          echo "Tauri initialization completed successfully"

      - name: Install system dependencies for build
        if: steps.check-commands.outputs.build_command == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Setup Rust for build
        if: steps.check-commands.outputs.build_command == 'true'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          echo "Rust installed successfully"
          
          rustup target add x86_64-pc-windows-gnu
          rustup target add x86_64-apple-darwin
          rustup target add x86_64-unknown-linux-gnu
          echo "Rust targets added"

      - name: Build Tauri app
        if: steps.check-commands.outputs.build_command == 'true'
        run: |
          source ~/.cargo/env
          echo "Building Tauri app..."
          
          if [ ! -d "src-tauri" ]; then
            echo "Tauri not initialized. Please run /init first."
            exit 1
          fi
          
          cd src-tauri
          cargo update
          cd ..
          
          pnpm tauri build
          echo "Build completed successfully"

      - name: Upload build artifacts
        if: steps.check-commands.outputs.build_command == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build-${{ runner.os }}
          path: |
            src-tauri/target/release/bundle/
            src-tauri/target/release/*.deb
            src-tauri/target/release/*.AppImage
            src-tauri/target/release/*.exe
          retention-days: 7

      - name: Post success comment
        if: steps.check-commands.outputs.init_command == 'true' || steps.check-commands.outputs.build_command == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { issue, comment } = context.payload;
            const issueNumber = issue?.number || comment?.issue?.number;
            
            let message = '';
            if ('${{ steps.check-commands.outputs.init_command }}' === 'true') {
              message = 'üöÄ Tauri initialization completed! The Tauri app structure has been set up and committed to the repository.';
            } else if ('${{ steps.check-commands.outputs.build_command }}' === 'true') {
              message = 'üî® Build completed! The Tauri app has been built successfully. Check the artifacts for the output files.';
            }
            
            if (message) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: message
              });
            }

      - name: Handle invalid command
        if: steps.check-commands.outputs.init_command != 'true' && steps.check-commands.outputs.build_command != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { issue, comment } = context.payload;
            const issueNumber = issue?.number || comment?.issue?.number;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: '‚ùå No valid command found. Available commands: `/init`, `/build`'
            })

      - name: Commit score
        if: steps.check-commands.outputs.init_command == 'true' || steps.check-commands.outputs.build_command == 'true'
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "Update code quality score"
          branch: main
          commit_user_name: shit-code-score
