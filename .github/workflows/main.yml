name: Tauri Bot

on:
  issue_comment:
    types: [created, edited]
  issues:
    types: [opened, edited]

permissions:
  issues: write
  contents: write
  pull-requests: write

env:
  TARGET_USER: 'ianchzhu'
  TAURI_APP_NAME: 'csec-coin-app'

jobs:
  process-commands:
    # Only run if the comment/issue is from the target user
    if: |
      (github.event.comment && github.event.comment.user.login == env.TARGET_USER) ||
      (github.event.issue.user.login == env.TARGET_USER)
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Check for commands
        id: check-commands
        run: |
          COMMENT_BODY=""
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
          else
            COMMENT_BODY="${{ github.event.issue.body }}"
          fi
          
          echo "Comment body: $COMMENT_BODY"
          
          if echo "$COMMENT_BODY" | grep -q "/init"; then
            echo "init_command=true" >> $GITHUB_OUTPUT
            echo "Found /init command"
          elif echo "$COMMENT_BODY" | grep -q "/build"; then
            echo "build_command=true" >> $GITHUB_OUTPUT
            echo "Found /build command"
          else
            echo "No valid command found"
          fi

      - name: Checkout code
        if: steps.check-commands.outputs.init_command == 'true' || steps.check-commands.outputs.build_command == 'true'
        uses: actions/checkout@v4

      - name: Setup pnpm
        if: steps.check-commands.outputs.init_command == 'true' || steps.check-commands.outputs.build_command == 'true'
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        if: steps.check-commands.outputs.init_command == 'true' || steps.check-commands.outputs.build_command == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Initialize Tauri (for /init command)
        if: steps.check-commands.outputs.init_command == 'true'
        run: |
          # Install Tauri CLI and create Tauri app
          pnpm add -g @tauri-apps/cli
          
          # Check if Tauri is already initialized by looking for src-tauri directory
          if [ -d "src-tauri" ]; then
            echo "Tauri is already initialized"
            echo "::warning::Tauri is already initialized in this repository"
            exit 0
          fi
          
          # Initialize Tauri
          pnpm tauri init \
            --app-name "${{ env.TAURI_APP_NAME }}" \
            --window-title "${{ env.TAURI_APP_NAME }}" \
            --dist-dir "../dist" \
            --dev-path "http://localhost:3000" \
            --yes
          
          # Create basic package.json if it doesn't exist
          if [ ! -f "package.json" ]; then
            echo '{
              "name": "'${{ env.TAURI_APP_NAME }}'",
              "version": "1.0.0",
              "type": "module",
              "scripts": {
                "dev": "tauri dev",
                "build": "tauri build"
              }
            }' > package.json
          fi
          
          # Add tauri scripts to package.json if they don't exist
          if [ -f "package.json" ]; then
            npm pkg set scripts.tauri="tauri"
            npm pkg set scripts.dev="tauri dev"
            npm pkg set scripts.build="tauri build"
          fi
          
          # Commit and push the changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Initialize Tauri app"
          git push

      - name: Build Tauri for all platforms (for /build command)
        if: steps.check-commands.outputs.build_command == 'true'
        run: |
          # Install dependencies and build
          pnpm install
          pnpm add -g @tauri-apps/cli
          
          # Install Rust and required targets
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          
          # Install required targets for cross-compilation
          rustup target add x86_64-pc-windows-gnu
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-unknown-linux-gnu
          
          # For Android build
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add i686-linux-android
          rustup target add x86_64-linux-android
          
          # Create build matrix and build for each platform
          # Note: Building for all platforms requires proper setup and might need separate runners
          # This is a simplified version that will attempt to build for current platform
          
          echo "Building Tauri app..."
          pnpm tauri build
          
          # The actual multi-platform build would require:
          # - macOS runner for macOS builds
          # - Windows runner for Windows builds  
          # - Special setup for Android builds

      - name: Upload artifacts (for /build command)
        if: steps.check-commands.outputs.build_command == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build-output
          path: src-tauri/target/release/bundle/
          retention-days: 7

      - name: Post comment response
        if: steps.check-commands.outputs.init_command == 'true' || steps.check-commands.outputs.build_command == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { issue, comment } = context.payload;
            const issueNumber = issue?.number || comment?.issue?.number;
            
            let message = '';
            if ('${{ steps.check-commands.outputs.init_command }}' === 'true') {
              message = 'üöÄ Tauri initialization completed! The Tauri app structure has been set up.';
            } else if ('${{ steps.check-commands.outputs.build_command }}' === 'true') {
              message = 'üî® Build completed! The Tauri app has been built. Check the artifacts for the output.';
            }
            
            if (message) {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: message
              });
            }

      - name: Handle invalid command
        if: steps.check-commands.outputs.init_command != 'true' && steps.check-commands.outputs.build_command != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { issue, comment } = context.payload;
            const issueNumber = issue?.number || comment?.issue?.number;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: '‚ùå No valid command found. Available commands: `/init`, `/build`'
            });
      - name: commit to repo
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "TAURI"
          branch: main
          commit_user_name: TAURI-BOT
